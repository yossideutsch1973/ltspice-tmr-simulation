* TMR Sensor Array Configuration Optimization Test
* Tests different sensor count (N) and pole-pair (P) combinations
* Based on the second paper: "Generalized Optimization of Harmonic TMR Sensor Arrays"

**********************************************************************
* 1. CONFIGURATION SELECTION
**********************************************************************
* Uncomment the desired configuration to test

* Original configuration (8 sensors, 7 pole pairs)
.param N = 8
.param P = 7

* Other optimal configurations from paper
* .param N = 8  ; .param P = 7  ; Optimal cost-performance
* .param N = 8  ; .param P = 7  ; High-performance configuration
* .param N = 8  ; .param P = 7  ; Better fault tolerance (N > P+2)

* Non-optimal configurations for comparison
* .param N = 8   ; .param P = 5   ; P < N-1
* .param N = 8   ; .param P = 7  ; P > N-1
* .param N = 8  ; .param P = 7  ; P > N-1

* Noise level
.param noise_level = 0.01  ; 1% noise

**********************************************************************
* 2. DYNAMIC SENSOR ARRAY GENERATION
**********************************************************************
* Parameters
.param theta = {time*360}     ; Mechanical rotation angle in degrees (1 rotation per second)
.param gold_ratio = 1.618     ; Golden ratio
.param gold_angle = {360/gold_ratio} ; Golden angle (≈137.5°)
.param A1 = 0.2               ; Fundamental amplitude
.param A7 = 1.0               ; 7th harmonic amplitude (we'll use this even for different P values)

* Create sensor array with dynamic count N
* We'll implement up to 32 sensors but only use N of them

* Generate sensor angular positions using golden angle
.func sensorPos(i) = {mod(i*gold_angle, 360)}

* Sensor signal generators
* Each sensor produces both fundamental (1×) and Pth harmonic (P×) components
.func sensorSignal(i,theta) = {A1*sin(theta*pi/180 + sensorPos(i)*pi/180) + 
+                             A7*sin(P*theta*pi/180 + P*sensorPos(i)*pi/180) + 
+                             noise_level*A7*white(time*1e3+i)}

* Generate behavioral sources for sensors
BS0 S0 0 V=N>=1 ? sensorSignal(0,theta) : 0
BS1 S1 0 V=N>=2 ? sensorSignal(1,theta) : 0
BS2 S2 0 V=N>=3 ? sensorSignal(2,theta) : 0
BS3 S3 0 V=N>=4 ? sensorSignal(3,theta) : 0
BS4 S4 0 V=N>=5 ? sensorSignal(4,theta) : 0
BS5 S5 0 V=N>=6 ? sensorSignal(5,theta) : 0
BS6 S6 0 V=N>=7 ? sensorSignal(6,theta) : 0
BS7 S7 0 V=N>=8 ? sensorSignal(7,theta) : 0
BS8 S8 0 V=N>=9 ? sensorSignal(8,theta) : 0
BS9 S9 0 V=N>=10 ? sensorSignal(9,theta) : 0
BS10 S10 0 V=N>=11 ? sensorSignal(10,theta) : 0
BS11 S11 0 V=N>=12 ? sensorSignal(11,theta) : 0
BS12 S12 0 V=N>=13 ? sensorSignal(12,theta) : 0
BS13 S13 0 V=N>=14 ? sensorSignal(13,theta) : 0
BS14 S14 0 V=N>=15 ? sensorSignal(14,theta) : 0
BS15 S15 0 V=N>=16 ? sensorSignal(15,theta) : 0
BS16 S16 0 V=N>=17 ? sensorSignal(16,theta) : 0
BS17 S17 0 V=N>=18 ? sensorSignal(17,theta) : 0
BS18 S18 0 V=N>=19 ? sensorSignal(18,theta) : 0
BS19 S19 0 V=N>=20 ? sensorSignal(19,theta) : 0
BS20 S20 0 V=N>=21 ? sensorSignal(20,theta) : 0
BS21 S21 0 V=N>=22 ? sensorSignal(21,theta) : 0
BS22 S22 0 V=N>=23 ? sensorSignal(22,theta) : 0
BS23 S23 0 V=N>=24 ? sensorSignal(23,theta) : 0
BS24 S24 0 V=N>=25 ? sensorSignal(24,theta) : 0
BS25 S25 0 V=N>=26 ? sensorSignal(25,theta) : 0
BS26 S26 0 V=N>=27 ? sensorSignal(26,theta) : 0
BS27 S27 0 V=N>=28 ? sensorSignal(27,theta) : 0
BS28 S28 0 V=N>=29 ? sensorSignal(28,theta) : 0
BS29 S29 0 V=N>=30 ? sensorSignal(29,theta) : 0
BS30 S30 0 V=N>=31 ? sensorSignal(30,theta) : 0
BS31 S31 0 V=N>=32 ? sensorSignal(31,theta) : 0

**********************************************************************
* 3. HARMONIC EXTRACTION FOR CONFIGURABLE ARRAY
**********************************************************************
* This implements a generalized harmonic extraction for dynamic sensor count
* We'll extract both fundamental and Pth harmonics

* Helper function to get sin/cos components for each sensor
.func sensorSinFund(i) = {V(S{i})*sin(sensorPos(i)*pi/180)}
.func sensorCosFund(i) = {V(S{i})*cos(sensorPos(i)*pi/180)}
.func sensorSinHarm(i) = {V(S{i})*sin(P*sensorPos(i)*pi/180)}
.func sensorCosHarm(i) = {V(S{i})*cos(P*sensorPos(i)*pi/180)}

* Fundamental harmonic extraction - build weighted sums of all N sensors
* This is done in a scalable way that only uses active sensors
BS_fund_sin fund_sin 0 V=(
+ (N>=1 ? sensorSinFund(0) : 0) + (N>=2 ? sensorSinFund(1) : 0) + 
+ (N>=3 ? sensorSinFund(2) : 0) + (N>=4 ? sensorSinFund(3) : 0) + 
+ (N>=5 ? sensorSinFund(4) : 0) + (N>=6 ? sensorSinFund(5) : 0) + 
+ (N>=7 ? sensorSinFund(6) : 0) + (N>=8 ? sensorSinFund(7) : 0) + 
+ (N>=9 ? sensorSinFund(8) : 0) + (N>=10 ? sensorSinFund(9) : 0) + 
+ (N>=11 ? sensorSinFund(10) : 0) + (N>=12 ? sensorSinFund(11) : 0) + 
+ (N>=13 ? sensorSinFund(12) : 0) + (N>=14 ? sensorSinFund(13) : 0) + 
+ (N>=15 ? sensorSinFund(14) : 0) + (N>=16 ? sensorSinFund(15) : 0) + 
+ (N>=17 ? sensorSinFund(16) : 0) + (N>=18 ? sensorSinFund(17) : 0) + 
+ (N>=19 ? sensorSinFund(18) : 0) + (N>=20 ? sensorSinFund(19) : 0) + 
+ (N>=21 ? sensorSinFund(20) : 0) + (N>=22 ? sensorSinFund(21) : 0) + 
+ (N>=23 ? sensorSinFund(22) : 0) + (N>=24 ? sensorSinFund(23) : 0) + 
+ (N>=25 ? sensorSinFund(24) : 0) + (N>=26 ? sensorSinFund(25) : 0) + 
+ (N>=27 ? sensorSinFund(26) : 0) + (N>=28 ? sensorSinFund(27) : 0) + 
+ (N>=29 ? sensorSinFund(28) : 0) + (N>=30 ? sensorSinFund(29) : 0) + 
+ (N>=31 ? sensorSinFund(30) : 0) + (N>=32 ? sensorSinFund(31) : 0)
+)/N

BS_fund_cos fund_cos 0 V=(
+ (N>=1 ? sensorCosFund(0) : 0) + (N>=2 ? sensorCosFund(1) : 0) + 
+ (N>=3 ? sensorCosFund(2) : 0) + (N>=4 ? sensorCosFund(3) : 0) + 
+ (N>=5 ? sensorCosFund(4) : 0) + (N>=6 ? sensorCosFund(5) : 0) + 
+ (N>=7 ? sensorCosFund(6) : 0) + (N>=8 ? sensorCosFund(7) : 0) + 
+ (N>=9 ? sensorCosFund(8) : 0) + (N>=10 ? sensorCosFund(9) : 0) + 
+ (N>=11 ? sensorCosFund(10) : 0) + (N>=12 ? sensorCosFund(11) : 0) + 
+ (N>=13 ? sensorCosFund(12) : 0) + (N>=14 ? sensorCosFund(13) : 0) + 
+ (N>=15 ? sensorCosFund(14) : 0) + (N>=16 ? sensorCosFund(15) : 0) + 
+ (N>=17 ? sensorCosFund(16) : 0) + (N>=18 ? sensorCosFund(17) : 0) + 
+ (N>=19 ? sensorCosFund(18) : 0) + (N>=20 ? sensorCosFund(19) : 0) + 
+ (N>=21 ? sensorCosFund(20) : 0) + (N>=22 ? sensorCosFund(21) : 0) + 
+ (N>=23 ? sensorCosFund(22) : 0) + (N>=24 ? sensorCosFund(23) : 0) + 
+ (N>=25 ? sensorCosFund(24) : 0) + (N>=26 ? sensorCosFund(25) : 0) + 
+ (N>=27 ? sensorCosFund(26) : 0) + (N>=28 ? sensorCosFund(27) : 0) + 
+ (N>=29 ? sensorCosFund(28) : 0) + (N>=30 ? sensorCosFund(29) : 0) + 
+ (N>=31 ? sensorCosFund(30) : 0) + (N>=32 ? sensorCosFund(31) : 0)
+)/N

* Pth harmonic extraction - weighted sums for all N sensors
BS_Pth_sin harm_sin 0 V=(
+ (N>=1 ? sensorSinHarm(0) : 0) + (N>=2 ? sensorSinHarm(1) : 0) + 
+ (N>=3 ? sensorSinHarm(2) : 0) + (N>=4 ? sensorSinHarm(3) : 0) + 
+ (N>=5 ? sensorSinHarm(4) : 0) + (N>=6 ? sensorSinHarm(5) : 0) + 
+ (N>=7 ? sensorSinHarm(6) : 0) + (N>=8 ? sensorSinHarm(7) : 0) + 
+ (N>=9 ? sensorSinHarm(8) : 0) + (N>=10 ? sensorSinHarm(9) : 0) + 
+ (N>=11 ? sensorSinHarm(10) : 0) + (N>=12 ? sensorSinHarm(11) : 0) + 
+ (N>=13 ? sensorSinHarm(12) : 0) + (N>=14 ? sensorSinHarm(13) : 0) + 
+ (N>=15 ? sensorSinHarm(14) : 0) + (N>=16 ? sensorSinHarm(15) : 0) + 
+ (N>=17 ? sensorSinHarm(16) : 0) + (N>=18 ? sensorSinHarm(17) : 0) + 
+ (N>=19 ? sensorSinHarm(18) : 0) + (N>=20 ? sensorSinHarm(19) : 0) + 
+ (N>=21 ? sensorSinHarm(20) : 0) + (N>=22 ? sensorSinHarm(21) : 0) + 
+ (N>=23 ? sensorSinHarm(22) : 0) + (N>=24 ? sensorSinHarm(23) : 0) + 
+ (N>=25 ? sensorSinHarm(24) : 0) + (N>=26 ? sensorSinHarm(25) : 0) + 
+ (N>=27 ? sensorSinHarm(26) : 0) + (N>=28 ? sensorSinHarm(27) : 0) + 
+ (N>=29 ? sensorSinHarm(28) : 0) + (N>=30 ? sensorSinHarm(29) : 0) + 
+ (N>=31 ? sensorSinHarm(30) : 0) + (N>=32 ? sensorSinHarm(31) : 0)
+)/N

BS_Pth_cos harm_cos 0 V=(
+ (N>=1 ? sensorCosHarm(0) : 0) + (N>=2 ? sensorCosHarm(1) : 0) + 
+ (N>=3 ? sensorCosHarm(2) : 0) + (N>=4 ? sensorCosHarm(3) : 0) + 
+ (N>=5 ? sensorCosHarm(4) : 0) + (N>=6 ? sensorCosHarm(5) : 0) + 
+ (N>=7 ? sensorCosHarm(6) : 0) + (N>=8 ? sensorCosHarm(7) : 0) + 
+ (N>=9 ? sensorCosHarm(8) : 0) + (N>=10 ? sensorCosHarm(9) : 0) + 
+ (N>=11 ? sensorCosHarm(10) : 0) + (N>=12 ? sensorCosHarm(11) : 0) + 
+ (N>=13 ? sensorCosHarm(12) : 0) + (N>=14 ? sensorCosHarm(13) : 0) + 
+ (N>=15 ? sensorCosHarm(14) : 0) + (N>=16 ? sensorCosHarm(15) : 0) + 
+ (N>=17 ? sensorCosHarm(16) : 0) + (N>=18 ? sensorCosHarm(17) : 0) + 
+ (N>=19 ? sensorCosHarm(18) : 0) + (N>=20 ? sensorCosHarm(19) : 0) + 
+ (N>=21 ? sensorCosHarm(20) : 0) + (N>=22 ? sensorCosHarm(21) : 0) + 
+ (N>=23 ? sensorCosHarm(22) : 0) + (N>=24 ? sensorCosHarm(23) : 0) + 
+ (N>=25 ? sensorCosHarm(24) : 0) + (N>=26 ? sensorCosHarm(25) : 0) + 
+ (N>=27 ? sensorCosHarm(26) : 0) + (N>=28 ? sensorCosHarm(27) : 0) + 
+ (N>=29 ? sensorCosHarm(28) : 0) + (N>=30 ? sensorCosHarm(29) : 0) + 
+ (N>=31 ? sensorCosHarm(30) : 0) + (N>=32 ? sensorCosHarm(31) : 0)
+)/N

**********************************************************************
* 4. ANGLE RECONSTRUCTION AND PERFORMANCE CALCULATION
**********************************************************************
* Extract phase angles
BS_fund_phase fund_phase 0 V=mod(atan2(V(fund_sin),V(fund_cos))*180/pi+360,360)
BS_Pth_phase harm_phase 0 V=mod(atan2(V(harm_sin),V(harm_cos))*180/pi+360,360)

* Sector determination and unwrapping
BS_sector sector 0 V=floor(V(fund_phase)/(360/P))
BS_unwrapped unwrapped 0 V=V(sector)*(360/P) + (mod(V(harm_phase) - P*V(fund_phase) + 360, 360))/P

* Calculate error
BS_error error 0 V=mod(theta - V(unwrapped) + 180, 360) - 180

* Calculate root mean square error - running average
BS_rms_error rms_error 0 V=sqrt(V(error)*V(error))

* Calculate effective resolution in bits
* Resolution = log2(360/error_in_degrees)
BS_resolution resolution 0 V=log10(360/max(abs(V(error)),0.0001))/log10(2)

**********************************************************************
* 5. TEST METRIC CALCULATION FOR PAPER VALIDATION
**********************************************************************
* Calculate performance metrics to validate paper's claims

* Metric 1: Average resolution over full rotation - calculate running average
BS_avg_res avg_resolution 0 V = V(resolution)

* Metric 2: Theoretical resolution prediction from paper formula
* Resolution ≈ R_single + log2(√N) + log2(min(P,N-1))
.param single_res = 10  ; Base single-sensor resolution (10-12 bits typical)
.param theory_res = {single_res + log(sqrt(N))/log(2) + log(min(P,N-1))/log(2)}
BS_theory theory_resolution 0 V = theory_res

* Metric 3: Worst-case error
BS_max_error max_error 0 V = max(abs(V(error)),time>0 ? V(max_error) : 0)

* Metric 4: Indicator if P = N-1 (optimal configuration)
BS_optimal isOptimal 0 V = P==(N-1) ? 1 : 0

**********************************************************************
* 6. OPTIMIZATION TESTING
**********************************************************************
* For testing multiple configurations in batch
* Uncomment to run optimization sweep
* .step param N list 4 6 8 12 16 24 32
* .step param P list 3 5 7 11 13 17 23 29 47

**********************************************************************
* SIMULATION COMMANDS
**********************************************************************
* Run transient analysis for one full rotation with fine time steps
.tran 0.001 1 0 0.0001

* Plot results
.plot V(unwrapped) V(theta)
.plot V(error)
.plot V(resolution)
.plot V(avg_resolution) V(theory_resolution)

.end
