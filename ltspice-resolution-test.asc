* TMR Sensor Array Resolution Test
* Tests angular resolution by applying small incremental angle changes

**********************************************************************
* 1. SENSOR SIGNAL GENERATION FOR STATIC ANGLE TESTING
**********************************************************************
* We'll use stepped parameter sweep instead of time-based rotation
* This allows precise control over small angle changes

* Parameters
.param theta = 0              ; Starting mechanical angle in degrees
.param gold_ratio = 1.618     ; Golden ratio
.param gold_angle = {360/gold_ratio} ; Golden angle (≈137.5°)
.param phi0 = 0               ; First sensor position
.param phi1 = {mod(1*gold_angle, 360)}
.param phi2 = {mod(2*gold_angle, 360)}
.param phi3 = {mod(3*gold_angle, 360)}
.param phi4 = {mod(4*gold_angle, 360)}
.param phi5 = {mod(5*gold_angle, 360)}
.param phi6 = {mod(6*gold_angle, 360)}
.param phi7 = {mod(7*gold_angle, 360)}
.param P = 7                  ; Number of pole pairs
.param A1 = 0.2               ; Fundamental amplitude
.param A7 = 1.0               ; 7th harmonic amplitude
.param noise_level = 0.001    ; 0.1% noise level for high-precision test

* Sensor signal generators
* Each sensor sees both fundamental (1× frequency) and 7th harmonic components
BS0 S0 0 V=A1*sin(theta*pi/180 + phi0*pi/180) + A7*sin(P*theta*pi/180 + P*phi0*pi/180) + noise_level*A7*rand()
BS1 S1 0 V=A1*sin(theta*pi/180 + phi1*pi/180) + A7*sin(P*theta*pi/180 + P*phi1*pi/180) + noise_level*A7*rand()
BS2 S2 0 V=A1*sin(theta*pi/180 + phi2*pi/180) + A7*sin(P*theta*pi/180 + P*phi2*pi/180) + noise_level*A7*rand()
BS3 S3 0 V=A1*sin(theta*pi/180 + phi3*pi/180) + A7*sin(P*theta*pi/180 + P*phi3*pi/180) + noise_level*A7*rand()
BS4 S4 0 V=A1*sin(theta*pi/180 + phi4*pi/180) + A7*sin(P*theta*pi/180 + P*phi4*pi/180) + noise_level*A7*rand()
BS5 S5 0 V=A1*sin(theta*pi/180 + phi5*pi/180) + A7*sin(P*theta*pi/180 + P*phi5*pi/180) + noise_level*A7*rand()
BS6 S6 0 V=A1*sin(theta*pi/180 + phi6*pi/180) + A7*sin(P*theta*pi/180 + P*phi6*pi/180) + noise_level*A7*rand()
BS7 S7 0 V=A1*sin(theta*pi/180 + phi7*pi/180) + A7*sin(P*theta*pi/180 + P*phi7*pi/180) + noise_level*A7*rand()

**********************************************************************
* 2. HARMONIC EXTRACTION AND ANGLE CALCULATION
**********************************************************************
* Direct calculation using behavioral sources
* This simulates what would be done in digital processing

* Fundamental harmonic extraction (frequency = 1×)
* Use weighted sum to extract sine/cosine components
BS_fund_sin fund_sin 0 V=sum(i=0,7,V(S{i})*sin(phi{i}*pi/180))/8
BS_fund_cos fund_cos 0 V=sum(i=0,7,V(S{i})*cos(phi{i}*pi/180))/8

* 7th harmonic extraction (frequency = 7×)
BS_7th_sin harm7_sin 0 V=sum(i=0,7,V(S{i})*sin(P*phi{i}*pi/180))/8
BS_7th_cos harm7_cos 0 V=sum(i=0,7,V(S{i})*cos(P*phi{i}*pi/180))/8

* Fundamental phase extraction
* Use atan2 to get full 360° phase (avoiding quadrant issues)
BS_fund_phase fund_phase 0 V=mod(atan2(V(fund_sin),V(fund_cos))*180/pi+360,360)

* 7th harmonic phase extraction
BS_7th_phase harm7_phase 0 V=mod(atan2(V(harm7_sin),V(harm7_cos))*180/pi+360,360)

* Coarse sector determination from fundamental phase
BS_sector sector 0 V=floor(V(fund_phase)/(360/P))

* Unwrap phase relationship to get fine position within sector
* This is the key resolution enhancement technique from the paper
BS_unwrapped unwrapped 0 V=V(sector)*(360/P) + (mod(V(harm7_phase) - P*V(fund_phase) + 360, 360))/P

* Calculate reconstruction error
BS_error error 0 V=mod(theta - V(unwrapped) + 180, 360) - 180

**********************************************************************
* 3. ERROR STATISTICS CALCULATION
**********************************************************************
* Calculate RMS error using a simple integrator approach
* This gives us a measure of the error over the sweep range
B_rms_error rms_error 0 V=sqrt(V(error)*V(error))

**********************************************************************
* 4. RESOLUTION TEST PARAMETERS
**********************************************************************
* Sweep angle with very small increments to test resolution
* We're testing around 0.002° resolution as claimed in the paper
.step param theta 0 360 0.002

* For Monte Carlo analysis of noise impact
* Uncomment this line and comment out the .step line above
* .step param run 1 1000 1 ; Run 1000 Monte Carlo iterations

**********************************************************************
* 5. FAILURE MODE TESTS
**********************************************************************
* To simulate sensor failures, modify these lines:
* BS0 S0 0 V=0 ; Simulate complete failure of sensor 0
* Or reduce signal amplitude to simulate partial failure:
* BS0 S0 0 V=0.5*(A1*sin(...) ; 50% amplitude reduction

**********************************************************************
* ADDITIONAL TEST CONFIGURATIONS
**********************************************************************
* Uncomment these sections to test various configurations

* Test different P/N configurations (from second paper)
* .param P = 7  ; N = 8 (Original configuration)
* .param P = 11 ; N = 12 (Optimal cost-performance)
* .param P = 17 ; N = 16 (High-performance)

* Test different noise levels
* .param noise_level = 0.001 ; 0.1% (low noise)
* .param noise_level = 0.01  ; 1% (moderate noise)
* .param noise_level = 0.1   ; 10% (high noise)

* Test magnetic field non-uniformities
* Modify A1/A7 ratios to simulate field distortions
* .param A1 = 0.4 ; Increase fundamental component
* .param A7 = 0.8 ; Decrease 7th harmonic

**********************************************************************
* OUTPUT COMMANDS
**********************************************************************
.save V(S0) V(S1) V(S2) V(S3) V(S4) V(S5) V(S6) V(S7)
.save V(fund_phase) V(harm7_phase) V(unwrapped) V(error) V(rms_error)

* Plot results
.print V(error)

.end
