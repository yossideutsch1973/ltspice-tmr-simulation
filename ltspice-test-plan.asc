* TMR Sensor Array Testing Framework for LTspice
* Based on 7th Harmonic TMR Sensor Array for Ultra-High Precision Absolute Angular Encoding

**********************************************************************
* 1. SENSOR SIGNAL GENERATION
**********************************************************************
* We'll use behavioral voltage sources to simulate 8 TMR sensors
* arranged in a golden-angle configuration around a 7-pole-pair magnet

* Parameters
.param theta = {time*360}        ; Mechanical rotation angle in degrees (1 rotation per second)
.param gold_ratio = 1.618        ; Golden ratio
.param gold_angle = {360/gold_ratio} ; Golden angle (≈137.5°)
.param phi0 = 0                  ; First sensor position
.param phi1 = {mod(1*gold_angle, 360)}
.param phi2 = {mod(2*gold_angle, 360)}
.param phi3 = {mod(3*gold_angle, 360)}
.param phi4 = {mod(4*gold_angle, 360)}
.param phi5 = {mod(5*gold_angle, 360)}
.param phi6 = {mod(6*gold_angle, 360)}
.param phi7 = {mod(7*gold_angle, 360)}
.param P = 7                     ; Number of pole pairs
.param A1 = 0.2                  ; Fundamental amplitude
.param A7 = 1.0                  ; 7th harmonic amplitude
.param noise_level = 0.01        ; 1% noise level

* Sensor signal generators
* Each sensor sees both fundamental (1× frequency) and 7th harmonic components
* S_i(θ) = A₁×sin(θ + φᵢ) + A₇×sin(7×θ + 7×φᵢ) + noise
BS0 S0 0 V=A1*sin(theta*pi/180 + phi0*pi/180) + A7*sin(P*theta*pi/180 + P*phi0*pi/180) + noise_level*A7*white(time*1e3)
BS1 S1 0 V=A1*sin(theta*pi/180 + phi1*pi/180) + A7*sin(P*theta*pi/180 + P*phi1*pi/180) + noise_level*A7*white(time*1e3)
BS2 S2 0 V=A1*sin(theta*pi/180 + phi2*pi/180) + A7*sin(P*theta*pi/180 + P*phi2*pi/180) + noise_level*A7*white(time*1e3)
BS3 S3 0 V=A1*sin(theta*pi/180 + phi3*pi/180) + A7*sin(P*theta*pi/180 + P*phi3*pi/180) + noise_level*A7*white(time*1e3)
BS4 S4 0 V=A1*sin(theta*pi/180 + phi4*pi/180) + A7*sin(P*theta*pi/180 + P*phi4*pi/180) + noise_level*A7*white(time*1e3)
BS5 S5 0 V=A1*sin(theta*pi/180 + phi5*pi/180) + A7*sin(P*theta*pi/180 + P*phi5*pi/180) + noise_level*A7*white(time*1e3)
BS6 S6 0 V=A1*sin(theta*pi/180 + phi6*pi/180) + A7*sin(P*theta*pi/180 + P*phi6*pi/180) + noise_level*A7*white(time*1e3)
BS7 S7 0 V=A1*sin(theta*pi/180 + phi7*pi/180) + A7*sin(P*theta*pi/180 + P*phi7*pi/180) + noise_level*A7*white(time*1e3)

**********************************************************************
* 2. SIGNAL CONDITIONING CIRCUIT
**********************************************************************
* Implement buffer amplifiers for each sensor channel
* This simulates the signal conditioning that would be applied to real TMR sensors

* Op-amp model (using ideal op-amp for now)
.lib opamp.sub

* Signal conditioning circuits (one for each sensor)
* Channel 0
X0 0 S0_buff S0 out0 opamp
R01 S0 S0_buff 10k
R02 S0_buff out0 10k

* Channel 1
X1 0 S1_buff S1 out1 opamp  
R11 S1 S1_buff 10k
R12 S1_buff out1 10k

* Channel 2
X2 0 S2_buff S2 out2 opamp
R21 S2 S2_buff 10k
R22 S2_buff out2 10k

* Channel 3
X3 0 S3_buff S3 out3 opamp
R31 S3 S3_buff 10k
R32 S3_buff out3 10k

* Channel 4
X4 0 S4_buff S4 out4 opamp
R41 S4 S4_buff 10k
R42 S4_buff out4 10k

* Channel 5
X5 0 S5_buff S5 out5 opamp
R51 S5 S5_buff 10k
R52 S5_buff out5 10k

* Channel 6
X6 0 S6_buff S6 out6 opamp
R61 S6 S6_buff 10k
R62 S6_buff out6 10k

* Channel 7
X7 0 S7_buff S7 out7 opamp
R71 S7 S7_buff 10k
R72 S7_buff out7 10k

**********************************************************************
* 3. HARMONIC EXTRACTION CIRCUITS
**********************************************************************
* For each harmonic (fundamental and 7th), we need to extract sine and cosine components
* We'll use a simplified approach here with behavioral sources

* Fundamental harmonic extraction (frequency = 1×)
* Sine component
BS_fund_sin fund_sin 0 V=sum(i=0,7,out{i}*sin(phi{i}*pi/180))/8
* Cosine component  
BS_fund_cos fund_cos 0 V=sum(i=0,7,out{i}*cos(phi{i}*pi/180))/8

* 7th harmonic extraction (frequency = 7×)
* Sine component
BS_7th_sin harm7_sin 0 V=sum(i=0,7,out{i}*sin(P*phi{i}*pi/180))/8
* Cosine component
BS_7th_cos harm7_cos 0 V=sum(i=0,7,out{i}*cos(P*phi{i}*pi/180))/8

**********************************************************************
* 4. ANGLE RECONSTRUCTION
**********************************************************************
* Extract phase angles from sine and cosine components
* For fundamental
BS_fund_phase fund_phase 0 V=mod(atan2(V(fund_sin),V(fund_cos))*180/pi+360,360)

* For 7th harmonic
BS_7th_phase harm7_phase 0 V=mod(atan2(V(harm7_sin),V(harm7_cos))*180/pi+360,360)

* Unwrap 7th harmonic phase to get fine resolution
BS_sector sector 0 V=floor(V(fund_phase)/(360/P))

* Calculate unwrapped angle combining coarse and fine info
BS_unwrapped unwrapped 0 V=V(sector)*(360/P) + (mod(V(harm7_phase) - P*V(fund_phase) + 360, 360))/P

* Calculate error between true angle and reconstructed angle
BS_error error 0 V=mod(theta - V(unwrapped) + 180, 360) - 180

**********************************************************************
* 5. FAILURE MODE TESTS
**********************************************************************
* Comment out these lines for normal operation
* Uncomment to simulate failed sensors
* .param fail_s0 = 0 ; Set to 1 to simulate sensor 0 failure
* .param fail_s1 = 0 ; Set to 1 to simulate sensor 1 failure
* .param fail_s2 = 0 ; Set to 1 to simulate sensor 2 failure

* Implement the failure by multiplying sensor output by (1-fail_s#)
* BS0 S0 0 V=(1-fail_s0)*(A1*sin(...))

**********************************************************************
* SIMULATION COMMANDS
**********************************************************************
* Run for one full rotation (1 second)
.tran 0.001 1 0 0.0001

* View results in plot
.plot V(S0) V(S1) V(S2) V(S3) V(S4) V(S5) V(S6) V(S7)
.plot V(fund_phase) V(harm7_phase)
.plot V(unwrapped) V(theta)
.plot V(error)

.end
