* TMR Sensor Array Fault Tolerance Test
* Tests system performance with multiple sensor failures

**********************************************************************
* 1. CONFIGURATION PARAMETERS
**********************************************************************
* Define basic parameters
.param theta = {time*360}     ; Mechanical rotation angle in degrees (1 rotation per second)
.param gold_ratio = 1.618     ; Golden ratio
.param gold_angle = {360/gold_ratio} ; Golden angle (≈137.5°)
.param P = 7                  ; Number of pole pairs
.param A1 = 0.2               ; Fundamental amplitude
.param A7 = 1.0               ; 7th harmonic amplitude
.param noise_level = 0.01     ; 1% noise level

* Sensor positions in golden-angle configuration
.param phi0 = 0                  ; First sensor position
.param phi1 = {mod(1*gold_angle, 360)}
.param phi2 = {mod(2*gold_angle, 360)}
.param phi3 = {mod(3*gold_angle, 360)}
.param phi4 = {mod(4*gold_angle, 360)}
.param phi5 = {mod(5*gold_angle, 360)}
.param phi6 = {mod(6*gold_angle, 360)}
.param phi7 = {mod(7*gold_angle, 360)}

**********************************************************************
* 2. FAILURE CONFIGURATION
**********************************************************************
* Sensor failure flags (0 = working, 1 = failed)
.param fail_s0 = 0     ; Set to 1 to simulate sensor 0 failure
.param fail_s1 = 0     ; Set to 1 to simulate sensor 1 failure
.param fail_s2 = 0     ; Set to 1 to simulate sensor 2 failure
.param fail_s3 = 0     ; Set to 1 to simulate sensor 3 failure
.param fail_s4 = 0     ; Set to 1 to simulate sensor 4 failure
.param fail_s5 = 0     ; Set to 1 to simulate sensor 5 failure
.param fail_s6 = 0     ; Set to 1 to simulate sensor 6 failure
.param fail_s7 = 0     ; Set to 1 to simulate sensor 7 failure

* Failure mode (1 = open circuit, 2 = short circuit, 3 = stuck value)
.param fail_mode = 1

* Stuck value (for fail_mode = 3)
.param stuck_value = 0.5

**********************************************************************
* 3. SENSOR SIGNAL GENERATION WITH FAILURE MODELING
**********************************************************************
* Sensor 0
BS0 S0 0 V=fail_s0==0 ? (A1*sin(theta*pi/180 + phi0*pi/180) + A7*sin(P*theta*pi/180 + P*phi0*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

* Sensor 1
BS1 S1 0 V=fail_s1==0 ? (A1*sin(theta*pi/180 + phi1*pi/180) + A7*sin(P*theta*pi/180 + P*phi1*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

* Sensor 2
BS2 S2 0 V=fail_s2==0 ? (A1*sin(theta*pi/180 + phi2*pi/180) + A7*sin(P*theta*pi/180 + P*phi2*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

* Sensor 3
BS3 S3 0 V=fail_s3==0 ? (A1*sin(theta*pi/180 + phi3*pi/180) + A7*sin(P*theta*pi/180 + P*phi3*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

* Sensor 4
BS4 S4 0 V=fail_s4==0 ? (A1*sin(theta*pi/180 + phi4*pi/180) + A7*sin(P*theta*pi/180 + P*phi4*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

* Sensor 5
BS5 S5 0 V=fail_s5==0 ? (A1*sin(theta*pi/180 + phi5*pi/180) + A7*sin(P*theta*pi/180 + P*phi5*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

* Sensor 6
BS6 S6 0 V=fail_s6==0 ? (A1*sin(theta*pi/180 + phi6*pi/180) + A7*sin(P*theta*pi/180 + P*phi6*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

* Sensor 7
BS7 S7 0 V=fail_s7==0 ? (A1*sin(theta*pi/180 + phi7*pi/180) + A7*sin(P*theta*pi/180 + P*phi7*pi/180) + noise_level*A7*white(time*1e3)) : 
+    fail_mode==1 ? 0 : fail_mode==2 ? 5 : stuck_value

**********************************************************************
* 4. ROBUST ANGLE CALCULATION WITH FAILURE COMPENSATION
**********************************************************************
* Fundamental harmonic extraction with sensor failure weighting
* Each failed sensor is excluded from the calculation
.param working_count = {(1-fail_s0) + (1-fail_s1) + (1-fail_s2) + (1-fail_s3) + (1-fail_s4) + (1-fail_s5) + (1-fail_s6) + (1-fail_s7)}

* Sine component - only include working sensors
BS_fund_sin fund_sin 0 V=((1-fail_s0)*V(S0)*sin(phi0*pi/180) + 
+                         (1-fail_s1)*V(S1)*sin(phi1*pi/180) + 
+                         (1-fail_s2)*V(S2)*sin(phi2*pi/180) + 
+                         (1-fail_s3)*V(S3)*sin(phi3*pi/180) + 
+                         (1-fail_s4)*V(S4)*sin(phi4*pi/180) + 
+                         (1-fail_s5)*V(S5)*sin(phi5*pi/180) + 
+                         (1-fail_s6)*V(S6)*sin(phi6*pi/180) + 
+                         (1-fail_s7)*V(S7)*sin(phi7*pi/180))/working_count

* Cosine component - only include working sensors  
BS_fund_cos fund_cos 0 V=((1-fail_s0)*V(S0)*cos(phi0*pi/180) + 
+                         (1-fail_s1)*V(S1)*cos(phi1*pi/180) + 
+                         (1-fail_s2)*V(S2)*cos(phi2*pi/180) + 
+                         (1-fail_s3)*V(S3)*cos(phi3*pi/180) + 
+                         (1-fail_s4)*V(S4)*cos(phi4*pi/180) + 
+                         (1-fail_s5)*V(S5)*cos(phi5*pi/180) + 
+                         (1-fail_s6)*V(S6)*cos(phi6*pi/180) + 
+                         (1-fail_s7)*V(S7)*cos(phi7*pi/180))/working_count

* 7th harmonic extraction - only include working sensors
* Sine component
BS_7th_sin harm7_sin 0 V=((1-fail_s0)*V(S0)*sin(P*phi0*pi/180) + 
+                         (1-fail_s1)*V(S1)*sin(P*phi1*pi/180) + 
+                         (1-fail_s2)*V(S2)*sin(P*phi2*pi/180) + 
+                         (1-fail_s3)*V(S3)*sin(P*phi3*pi/180) + 
+                         (1-fail_s4)*V(S4)*sin(P*phi4*pi/180) + 
+                         (1-fail_s5)*V(S5)*sin(P*phi5*pi/180) + 
+                         (1-fail_s6)*V(S6)*sin(P*phi6*pi/180) + 
+                         (1-fail_s7)*V(S7)*sin(P*phi7*pi/180))/working_count

* Cosine component
BS_7th_cos harm7_cos 0 V=((1-fail_s0)*V(S0)*cos(P*phi0*pi/180) + 
+                         (1-fail_s1)*V(S1)*cos(P*phi1*pi/180) + 
+                         (1-fail_s2)*V(S2)*cos(P*phi2*pi/180) + 
+                         (1-fail_s3)*V(S3)*cos(P*phi3*pi/180) + 
+                         (1-fail_s4)*V(S4)*cos(P*phi4*pi/180) + 
+                         (1-fail_s5)*V(S5)*cos(P*phi5*pi/180) + 
+                         (1-fail_s6)*V(S6)*cos(P*phi6*pi/180) + 
+                         (1-fail_s7)*V(S7)*cos(P*phi7*pi/180))/working_count

* Extract phase angles
BS_fund_phase fund_phase 0 V=mod(atan2(V(fund_sin),V(fund_cos))*180/pi+360,360)
BS_7th_phase harm7_phase 0 V=mod(atan2(V(harm7_sin),V(harm7_cos))*180/pi+360,360)

* Sector determination and unwrapping
BS_sector sector 0 V=floor(V(fund_phase)/(360/P))
BS_unwrapped unwrapped 0 V=V(sector)*(360/P) + (mod(V(harm7_phase) - P*V(fund_phase) + 360, 360))/P

* Calculate error
BS_error error 0 V=mod(theta - V(unwrapped) + 180, 360) - 180

* Calculate RMS error
BS_rms_error rms_error 0 V=sqrt(V(error)*V(error))

* Error detection logic
* Implement consistency check between sensors
BS_error_detect error_detect 0 V= working_count < 5 ? 1 : 0

**********************************************************************
* 5. TEST CONFIGURATIONS
**********************************************************************
* Define test scenario for different failure cases

* Test 1: No failures (baseline)
* All fail_s# parameters set to 0

* Test 2: Single sensor failure
* .param fail_s0 = 0

* Test 3: Two sensor failures
* .param fail_s0 = 0
* .param fail_s4 = 0  ; Sensor at opposite side

* Test 4: Three sensor failures
* .param fail_s0 = 0
* .param fail_s3 = 1
* .param fail_s6 = 1  ; Distributed failures

* Different failure modes
* .param fail_mode = 1  ; Open circuit
* .param fail_mode = 2  ; Short circuit
* .param fail_mode = 3  ; Stuck value

**********************************************************************
* SIMULATION COMMANDS
**********************************************************************
* Run transient analysis for one full rotation
.tran 0.001 1 0 0.0001

* Plot results
.plot V(S0) V(S1) V(S2) V(S3) V(S4) V(S5) V(S6) V(S7)
.plot V(unwrapped) V(theta)
.plot V(error)
.plot V(rms_error)
.plot V(error_detect)

.end
