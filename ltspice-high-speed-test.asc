* TMR Sensor Array High-Speed Performance Test
* Tests the system performance at extreme rotation speeds (up to 30,000 RPM)

**********************************************************************
* 1. CONFIGURATION PARAMETERS
**********************************************************************
* Basic parameters
.param P = 7                     ; Number of pole pairs
.param N = 8                     ; Number of sensors
.param gold_ratio = 1.618        ; Golden ratio
.param gold_angle = {360/gold_ratio} ; Golden angle (≈137.5°)
.param A1 = 0.2                  ; Fundamental amplitude
.param A7 = 1.0                  ; 7th harmonic amplitude
.param noise_level = 0.01        ; 1% noise level

* Sensor positions using golden-angle spacing
.param phi0 = 0                  ; First sensor position
.param phi1 = {mod(1*gold_angle, 360)}
.param phi2 = {mod(2*gold_angle, 360)}
.param phi3 = {mod(3*gold_angle, 360)}
.param phi4 = {mod(4*gold_angle, 360)}
.param phi5 = {mod(5*gold_angle, 360)}
.param phi6 = {mod(6*gold_angle, 360)}
.param phi7 = {mod(7*gold_angle, 360)}

**********************************************************************
* 2. ROTATION SPEED CONFIGURATION
**********************************************************************
* Select rotation speed
* 30,000 RPM = 500 Hz = 500 revolutions per second
.param RPM = 10000
.param Hz = {RPM/60}
.param radians_per_second = {Hz*2*pi}

* Define theta as a function of time for the selected rotation speed
.param theta = {mod(time*Hz*360, 360)}

**********************************************************************
* 3. SENSOR SIGNAL GENERATION
**********************************************************************
* Generate sensor signals with appropriate frequency components for the selected speed
* At 30,000 RPM:
* - Fundamental: 500 Hz
* - 7th harmonic: 3500 Hz (P=7)

* Sensor 0
BS0 S0 0 V=A1*sin(theta*pi/180 + phi0*pi/180) + A7*sin(P*theta*pi/180 + P*phi0*pi/180) + noise_level*A7*white(time*1e4)

* Sensor 1
BS1 S1 0 V=A1*sin(theta*pi/180 + phi1*pi/180) + A7*sin(P*theta*pi/180 + P*phi1*pi/180) + noise_level*A7*white(time*1e4)

* Sensor 2
BS2 S2 0 V=A1*sin(theta*pi/180 + phi2*pi/180) + A7*sin(P*theta*pi/180 + P*phi2*pi/180) + noise_level*A7*white(time*1e4)

* Sensor 3
BS3 S3 0 V=A1*sin(theta*pi/180 + phi3*pi/180) + A7*sin(P*theta*pi/180 + P*phi3*pi/180) + noise_level*A7*white(time*1e4)

* Sensor 4
BS4 S4 0 V=A1*sin(theta*pi/180 + phi4*pi/180) + A7*sin(P*theta*pi/180 + P*phi4*pi/180) + noise_level*A7*white(time*1e4)

* Sensor 5
BS5 S5 0 V=A1*sin(theta*pi/180 + phi5*pi/180) + A7*sin(P*theta*pi/180 + P*phi5*pi/180) + noise_level*A7*white(time*1e4)

* Sensor 6
BS6 S6 0 V=A1*sin(theta*pi/180 + phi6*pi/180) + A7*sin(P*theta*pi/180 + P*phi6*pi/180) + noise_level*A7*white(time*1e4)

* Sensor 7
BS7 S7 0 V=A1*sin(theta*pi/180 + phi7*pi/180) + A7*sin(P*theta*pi/180 + P*phi7*pi/180) + noise_level*A7*white(time*1e4)

**********************************************************************
* 4. SIGNAL CONDITIONING CIRCUIT WITH BANDWIDTH EFFECTS
**********************************************************************
* Model op-amp bandwidth effects at high frequency
* This is important at 30,000 RPM where the 7th harmonic is at 3.5 kHz

* Define op-amp with finite bandwidth
.param bandwidth = 100k         ; Op-amp bandwidth in Hz
.param gain = 1                  ; Gain

* First-order low-pass filter representing op-amp bandwidth limitation
R_in0 S0 filt0_in 1k
C_filt0 filt0_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff0 filt0_out 0 V=gain*V(filt0_in)

R_in1 S1 filt1_in 1k
C_filt1 filt1_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff1 filt1_out 0 V=gain*V(filt1_in)

R_in2 S2 filt2_in 1k
C_filt2 filt2_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff2 filt2_out 0 V=gain*V(filt2_in)

R_in3 S3 filt3_in 1k
C_filt3 filt3_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff3 filt3_out 0 V=gain*V(filt3_in)

R_in4 S4 filt4_in 1k
C_filt4 filt4_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff4 filt4_out 0 V=gain*V(filt4_in)

R_in5 S5 filt5_in 1k
C_filt5 filt5_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff5 filt5_out 0 V=gain*V(filt5_in)

R_in6 S6 filt6_in 1k
C_filt6 filt6_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff6 filt6_out 0 V=gain*V(filt6_in)

R_in7 S7 filt7_in 1k
C_filt7 filt7_in 0 {1/(2*pi*bandwidth*1k)}
BS_buff7 filt7_out 0 V=gain*V(filt7_in)

**********************************************************************
* 5. HARMONIC EXTRACTION WITH PROCESSING DELAY
**********************************************************************
* Include processing delay to model real-world performance
* Paper states ~100 µs latency

.param processing_delay = 100u   ; 100 µs processing delay

* Fundamental harmonic extraction (with processing delay)
* Sine component
BS_fund_sin fund_sin_raw 0 V=sum(i=0,7,V(filt{i}_out)*sin(phi{i}*pi/180))/8
BS_fund_sin_delayed fund_sin 0 V=delay(V(fund_sin_raw), processing_delay)

* Cosine component  
BS_fund_cos fund_cos_raw 0 V=sum(i=0,7,V(filt{i}_out)*cos(phi{i}*pi/180))/8
BS_fund_cos_delayed fund_cos 0 V=delay(V(fund_cos_raw), processing_delay)

* 7th harmonic extraction (with processing delay)
* Sine component
BS_7th_sin harm7_sin_raw 0 V=sum(i=0,7,V(filt{i}_out)*sin(P*phi{i}*pi/180))/8
BS_7th_sin_delayed harm7_sin 0 V=delay(V(harm7_sin_raw), processing_delay)

* Cosine component
BS_7th_cos harm7_cos_raw 0 V=sum(i=0,7,V(filt{i}_out)*cos(P*phi{i}*pi/180))/8
BS_7th_cos_delayed harm7_cos 0 V=delay(V(harm7_cos_raw), processing_delay)

**********************************************************************
* 6. ANGLE RECONSTRUCTION WITH LATENCY EFFECTS
**********************************************************************
* Extract phase angles
BS_fund_phase fund_phase 0 V=mod(atan2(V(fund_sin),V(fund_cos))*180/pi+360,360)
BS_7th_phase harm7_phase 0 V=mod(atan2(V(harm7_sin),V(harm7_cos))*180/pi+360,360)

* Sector determination and unwrapping
BS_sector sector 0 V=floor(V(fund_phase)/(360/P))
BS_unwrapped unwrapped 0 V=V(sector)*(360/P) + (mod(V(harm7_phase) - P*V(fund_phase) + 360, 360))/P

* Calculate error compared to actual angle
* Note: Because of processing delay, compare to delayed theta
.param theta_delayed = {mod((time-processing_delay)*Hz*360, 360)}
BS_theta_d theta_delayed 0 V=time<processing_delay ? 0 : theta_delayed

* Error calculation
BS_error error 0 V=time<processing_delay ? 0 : mod(V(theta_delayed) - V(unwrapped) + 180, 360) - 180

* Calculate RMS error (running average)
BS_rms_error rms_error 0 V=sqrt(V(error)*V(error))

**********************************************************************
* 7. SPEED COMPARATIVE ANALYSIS
**********************************************************************
* Optional - use for comparing performance at different speeds
* .step param RPM list 1000 5000 10000 20000 30000

**********************************************************************
* 8. PERFORMANCE METRICS
**********************************************************************
* Calculate angular velocity in real time
BS_velocity velocity 0 V=RPM/60*360 ; degrees/second

* Calculate maximum expected velocity error based on processing delay
BS_expected_error expected_error 0 V=V(velocity)*processing_delay

* Calculate sampling-induced error
.param update_rate = 10000 ; 10 kHz update rate from the paper
.param sampling_error = {(RPM/60)*360/(2*update_rate)} ; half a sampling period error
BS_sampling_error sampling_error 0 V=sampling_error

* Calculate total theoretical error
BS_total_theory total_theory_error 0 V=sqrt(0.003*0.003 + V(expected_error)*V(expected_error) + V(sampling_error)*V(sampling_error))

**********************************************************************
* SIMULATION COMMANDS
**********************************************************************
* Run for a few rotations at high speed with fine time steps
* At 30,000 RPM (500 Hz), each rotation takes 2ms
* Run for 10ms to capture 5 full rotations
.tran 1u 10m 0 0.1u

* Plot results
.plot V(S0) V(S1) V(S2) V(S3)
.plot V(filt0_out) V(filt4_out)  ; Show filtering effects
.plot V(unwrapped) V(theta_delayed) ; Show tracking performance
.plot V(error) V(expected_error) ; Compare actual vs. theoretical error
.plot V(total_theory_error) V(rms_error)

.end
